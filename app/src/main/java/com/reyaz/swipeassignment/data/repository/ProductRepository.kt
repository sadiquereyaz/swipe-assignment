package com.reyaz.swipeassignment.data.repository

import android.net.Uri
import android.util.Log
import com.reyaz.swipeassignment.data.api.SwipeApi
import com.reyaz.swipeassignment.data.db.dao.ProductDao
import com.reyaz.swipeassignment.data.db.entity.ProductEntity
import com.reyaz.swipeassignment.domain.Resource
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.toRequestBody

class ProductRepository(
    private val api: SwipeApi,
    private val dao: ProductDao
) {
    fun getAllProducts(): Flow<Resource<List<ProductEntity>>> = flow {
        Log.d("REPOSITORY", "getAllProducts()")
        emit(Resource.Loading())
        try {
            if (isOnline()) refreshProducts()
            dao.getAllProducts().collect { products ->
                emit(Resource.Success(products))
            }
        } catch (e: Exception) {
            Log.d("REPOSITORY", "getAllProducts() ERRor ${e.message}")
            emit(Resource.Error(e.message ?: "Unknown error"))
        }
    }

    //    fun getAllProducts(): Flow<List<ProductEntity>> = dao.getAllProducts()
    private suspend fun refreshProducts() {
        Log.d("REPOSITORY", "refresh()")
        try {
            val response = api.getProducts()
            Log.d("REPOSITORY", "product response ${response.body()}")
            if (response.isSuccessful) {
                response.body()?.forEach { product ->
                    if (product.image != "")
                        dao.insertProduct(product.toEntity())
                }
            } else {
                Log.e("REPOSITORY", "Error fetching products: ${response.message()}")
            }
        } catch (e: Exception) {
            Log.e("REPOSITORY", "refreshProducts error: ${e.message}")
        }
    }


    suspend fun addProduct(
        productName: String,
        productType: String,
        price: Double,
        tax: Double,
        imageUri: Uri?,
//        product: ProductEntity
    ): Resource<Unit> {
        return try {

            if (!isOnline()) {
                dao.insertProduct(
                    ProductEntity(
                        id = 0, // Auto-generated by Room
                        productName = productName,
                        productType = productType,
                        price = price,
                        tax = tax,
                        image = imageUri?.toString() ?: ""
                    )
                )
                return Resource.Success(Unit)
            }
            val response = api.addProduct(
                productName.toRequestBody(),
                productType.toRequestBody(),
                price.toString().toRequestBody(),
                tax.toString().toRequestBody(),
                createImagePart(uri = imageUri!!)
            )

            when (response) {
                is Resource.Success -> {
                    //dao.insertProduct(product.copy(isPending = false))
                    Resource.Success(Unit)
                }

                is Resource.Error -> {
                    Resource.Error(response.message ?: "Error while adding the product")
                }

                is Resource.Loading -> {
                    Resource.Success(Unit)
                }
            }

        } catch (e: Exception) {
            Resource.Error(e.message ?: "Unknown error")
        }

    }

    private fun createImagePart(uri: Uri): MultipartBody.Part {
        // Stubbed function for creating image parts if needed
        // Real implementation will depend on the file loading logic
        return MultipartBody.Part.createFormData(
            "file",
            "image.jpg",
            uri.toString().toRequestBody()
        )
    }
}

fun isOnline() = true